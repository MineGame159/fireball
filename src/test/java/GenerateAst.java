import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.List;

public class GenerateAst {
    public static void main(String[] args) throws IOException {
        String dir = "src/main/java/minegame159/fireball";

        defineAst(dir, "Stmt", List.of(
                "Expression : Expr expression",
                "Block      : List<Stmt> statements",
                "Variable   : Token type, Token name, Expr initializer",
                "If         : Expr condition, Stmt thenBranch, Stmt elseBranch",
                "While      : Expr condition, Stmt body",
                "For        : Stmt initializer, Expr condition, Expr increment, Stmt body"
        ));

        defineAst(dir, "Expr", List.of(
                "Null        : ",
                "Bool        : boolean value",
                "UnsignedInt : int bytes, long value",
                "Int         : int bytes, long value",
                "Float       : boolean is64bit, double value",
                "String      : java.lang.String value",

                "Grouping    : Expr expression",
                "Binary      : Expr left, Token operator, Expr right",
                "Unary       : Token operator, Expr right",
                "Logical     : Expr left, Token operator, Expr right",
                "Variable    : Token name",
                "Assign      : Token name, Expr value"
        ));
    }

    private static void defineAst(String outputDir, String baseName, List<String> types) throws IOException {
        PrintWriter writer = new PrintWriter(outputDir + "/" + baseName + ".java", StandardCharsets.UTF_8);

        writer.println("// This file is automatically generated, do not edit it manually");
        writer.println();
        writer.println("package minegame159.fireball;");
        writer.println();
        writer.println("import java.util.List;");
        writer.println();
        writer.println("public abstract class " + baseName + " {");

        defineVisitor(writer, baseName, types);

        for (String type : types) {
            String className = type.split(":")[0].trim();
            String fields = type.split(":")[1].trim();

            writer.println();
            defineType(writer, baseName, className, fields);
        }

        writer.println();
        writer.println("    public abstract void accept(Visitor visitor);");

        writer.println("}");
        writer.close();
    }

    private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) {
        writer.println("    interface Visitor {");

        for (String type : types) {
            String typeName = type.split(":")[0].trim();
            writer.println("        void visit" + typeName + baseName + "(" + typeName + " " + baseName.toLowerCase() + ");");
        }

        writer.println("    }");
    }

    private static void defineType(PrintWriter writer, String baseName, String className, String fieldList) {
        writer.println("    public static class " + className + " extends " + baseName + " {");

        if (!fieldList.isEmpty()) {
            // Fields
            String[] fields = fieldList.split(", ");

            for (String field : fields) {
                writer.println("        public final " + field + ";");
            }

            // Constructor
            writer.println();
            writer.println("        public " + className + "(" + fieldList + ") {");

            for (String field : fields) {
                String name = field.split(" ")[1];
                writer.println("            this." + name + " = " + name + ";");
            }
            writer.println("        }");

            writer.println();
        }

        // Visitor pattern.
        writer.println("        @Override");
        writer.println("        public void accept(Visitor visitor) {");
        writer.println("            visitor.visit" + className + baseName + "(this);");
        writer.println("        }");

        writer.println("    }");
    }
}
