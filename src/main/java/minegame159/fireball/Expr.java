// This file is automatically generated, do not edit it manually

package minegame159.fireball;

import java.util.List;

public abstract class Expr {
    interface Visitor {
        void visitNullExpr(Null expr);
        void visitBoolExpr(Bool expr);
        void visitUnsignedIntExpr(UnsignedInt expr);
        void visitIntExpr(Int expr);
        void visitFloatExpr(Float expr);
        void visitStringExpr(String expr);
        void visitGroupingExpr(Grouping expr);
        void visitBinaryExpr(Binary expr);
        void visitUnaryExpr(Unary expr);
        void visitLogicalExpr(Logical expr);
        void visitVariableExpr(Variable expr);
        void visitAssignExpr(Assign expr);
    }

    public static class Null extends Expr {
        @Override
        public void accept(Visitor visitor) {
            visitor.visitNullExpr(this);
        }
    }

    public static class Bool extends Expr {
        public final boolean value;

        Bool(boolean value) {
            this.value = value;
        }

        @Override
        public void accept(Visitor visitor) {
            visitor.visitBoolExpr(this);
        }
    }

    public static class UnsignedInt extends Expr {
        public final int bytes;
        public final long value;

        UnsignedInt(int bytes, long value) {
            this.bytes = bytes;
            this.value = value;
        }

        @Override
        public void accept(Visitor visitor) {
            visitor.visitUnsignedIntExpr(this);
        }
    }

    public static class Int extends Expr {
        public final int bytes;
        public final long value;

        Int(int bytes, long value) {
            this.bytes = bytes;
            this.value = value;
        }

        @Override
        public void accept(Visitor visitor) {
            visitor.visitIntExpr(this);
        }
    }

    public static class Float extends Expr {
        public final boolean is64bit;
        public final double value;

        Float(boolean is64bit, double value) {
            this.is64bit = is64bit;
            this.value = value;
        }

        @Override
        public void accept(Visitor visitor) {
            visitor.visitFloatExpr(this);
        }
    }

    public static class String extends Expr {
        public final java.lang.String value;

        String(java.lang.String value) {
            this.value = value;
        }

        @Override
        public void accept(Visitor visitor) {
            visitor.visitStringExpr(this);
        }
    }

    public static class Grouping extends Expr {
        public final Expr expression;

        Grouping(Expr expression) {
            this.expression = expression;
        }

        @Override
        public void accept(Visitor visitor) {
            visitor.visitGroupingExpr(this);
        }
    }

    public static class Binary extends Expr {
        public final Expr left;
        public final Token operator;
        public final Expr right;

        Binary(Expr left, Token operator, Expr right) {
            this.left = left;
            this.operator = operator;
            this.right = right;
        }

        @Override
        public void accept(Visitor visitor) {
            visitor.visitBinaryExpr(this);
        }
    }

    public static class Unary extends Expr {
        public final Token operator;
        public final Expr right;

        Unary(Token operator, Expr right) {
            this.operator = operator;
            this.right = right;
        }

        @Override
        public void accept(Visitor visitor) {
            visitor.visitUnaryExpr(this);
        }
    }

    public static class Logical extends Expr {
        public final Expr left;
        public final Token operator;
        public final Expr right;

        Logical(Expr left, Token operator, Expr right) {
            this.left = left;
            this.operator = operator;
            this.right = right;
        }

        @Override
        public void accept(Visitor visitor) {
            visitor.visitLogicalExpr(this);
        }
    }

    public static class Variable extends Expr {
        public final Token name;

        Variable(Token name) {
            this.name = name;
        }

        @Override
        public void accept(Visitor visitor) {
            visitor.visitVariableExpr(this);
        }
    }

    public static class Assign extends Expr {
        public final Token name;
        public final Expr value;

        Assign(Token name, Expr value) {
            this.name = name;
            this.value = value;
        }

        @Override
        public void accept(Visitor visitor) {
            visitor.visitAssignExpr(this);
        }
    }

    public abstract void accept(Visitor visitor);
}
