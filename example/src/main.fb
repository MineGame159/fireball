/*struct Vec2 {
    x i32,
    y i32,
}

impl Vec2 {
    static func new(x i32, y i32) Vec2 {
        return Vec2 { x: x, y: y };
    }

    func add(v Vec2) Vec2 {
        return Vec2 { x: this.x + v.x, y: this.y + v.y };
    }

    func print() {
        LibC.printf("X: %d, Y: %d\n", this.x, this.y);
    }
}

func main() {
    LibC.printf("Size: %d\n", sizeof(Foo));
    LibC.printf("Align: %d\n", alignof(Foo));
    LibC.printf("\n");

    LibC.printf("Foo.bar: %d\n", Foo.bar);
    Foo.setBar(5);
    LibC.printf("Foo.bar: %d\n", Foo.bar);
    LibC.printf("\n");

    foo(=> Vec2.new);

    var vec = new Vec2 { x: 1, y: 1 };
    vec.print();
    free(vec);

    LibC.printf("\n");

    var a = new f64[4];
    a[2] = 4.0;

    LibC.printf("%f\n", sqrt(a[2]));
    free(a);
}

func foo(new (x i32, y i32) Vec2) {
    var a = new(2, 9);
    var b = new(6, 2);

    a.add(b).print();
}

intrinsic func sqrt(a f64) f64

extern func malloc(len u64) *void
extern func free(ptr *void) void*/

struct Vec4 {
    x f32,
    y f32,
    z f32,
    w f32,
}

func add(a Vec4, b Vec4) Vec4 {
    var v Vec4;

    v.x = a.x + b.x;
    v.y = a.y + b.y;
    v.z = a.z + b.z;
    v.w = a.w + b.w;

    return v;
}

func main() {
    var a Vec4;
    var b Vec4;

    var c = add(a, b);
    LibC.printf("%d\n", c.x);
}
