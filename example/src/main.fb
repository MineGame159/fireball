struct Vec2 {
    x i32,
    y i32,
}

impl Vec2 {
    static func new(x i32, y i32) Vec2 {
        return Vec2 { x: x, y: y };
    }

    func add(v Vec2) Vec2 {
        return Vec2 { x: this.x + v.x, y: this.y + v.y };
    }

    func print() {
        LibC.printf("X: %d, Y: %d\n", this.x, this.y);
    }
}

func main() {
    LibC.printf("Size: %d\n", sizeof(Foo));
    LibC.printf("Align: %d\n", alignof(Foo));
    LibC.printf("\n");

    LibC.printf("Foo.bar: %d\n", Foo.bar);
    Foo.setBar(5);
    LibC.printf("Foo.bar: %d\n", Foo.bar);
    LibC.printf("\n");

    foo(=> Vec2.new);

    var vec = new Vec2 { x: 1, y: 1 };
    vec.print();
    free(vec);

    LibC.printf("\n");

    var a = new f64[4];
    a[2] = 4.0;

    LibC.printf("%f\n", mySqrt(a[2]));
    free(a);
}

#[Inline]
func foo(new fn (x i32, y i32) Vec2) {
    var a = new(2, 9);
    var b = new(6, 2);

    a.add(b).print();
}

#[Intrinsic("sqrt")]
func mySqrt(a f64) f64

#[Extern]
func malloc(size u64) *void

#[Extern]
func free(ptr *void) void
