namespace Tests.Abi;

struct Color {
    r u8,
    g u8,
    b u8,
    a u8,
}

struct Registers {
    a i32,
    b i8,
    c i64,
}

struct Memory {
    a i32,
    b i64,
    c f64,
}



func checkColor(color Color, r i32, g i32, b i32, a i32) bool {
    return color.r == r && color.g == g && color.b == b && color.a == a;
}

func checkPointer(pointer *void) bool {
    return pointer == nil;
}

func checkRegisters(reg Registers, a i32, b i8, c i64) bool {
    return reg.a == a && reg.b == b && reg.c == c;
}

func checkMemory(mem Memory, a i32, b i64, c f64) bool {
    return mem.a == a && mem.b == b && mem.c == c;
}



func getColor(r i32, g i32, b i32, a i32) Color {
    return Color { r: r as u8, g: g as u8, b: b as u8, a: a as u8 };
}

func getPointer() *void {
    return nil;
}

func getRegisters(a i32, b i8, c i64) Registers {
    return Registers { a: a, b: b, c: c };
}

func getMemory(a i32, b i64, c f64) Memory {
    return Memory { a: a, b: b, c: c };
}



#[Test]
func passColor() bool {
    var color = Color { r: 1 as u8, g: 2 as u8, b: 3 as u8, a: 4 as u8 };
    return checkColor(color, 1, 2, 3, 4);
}

#[Test]
func passPointer() bool {
    var pointer = nil;
    return checkPointer(pointer);
}

#[Test]
func passRegisters() bool {
    var reg = Registers { a: 2, b: 5 as i8, c: 9 };
    return checkRegisters(reg, 2, 5 as i8, 9);
}

#[Test]
func passMemory() bool {
    var mem = Memory { a: 2, b: 5, c: 9.0 };
    return checkMemory(mem, 2, 5, 9.0);
}



#[Test]
func returnColor() bool {
    var color = getColor(1, 2, 3, 4);
    return color.r == 1 && color.g == 2 && color.b == 3 && color.a == 4;
}

#[Test]
func returnPointer() bool {
    var pointer = getPointer();
    return pointer == nil;
}

#[Test]
func returnRegisters() bool {
    var reg = getRegisters(2, 5 as i8, 9);
    return reg.a == 2 && reg.b == 5 && reg.c == 9;
}

#[Test]
func returnMemory() bool {
    var mem = getMemory(2, 5, 9.0);
    return mem.a == 2 && mem.b == 5 && mem.c == 9.0;
}



#[Test]
func returnColorDirect() bool {
    return getColor(1, 2, 3, 4).g == 2;
}

#[Test]
func returnPointerDirect() bool {
    return getPointer() == nil;
}

#[Test]
func returnRegistersDirect() bool {
    return getRegisters(2, 5 as i8, 9).c == 9;
}

#[Test]
func returnMemoryDirect() bool {
    return getMemory(2, 5, 9.0).a == 2;
}
