namespace Tests.Generics;

struct Foo {}

impl Foo {
    static func pass[T](v T) T {
        return v;
    }
}

func pass[T](v T) T {
    return v;
}



#[Test]
func callGlobal() bool {
    return pass![i32](5) == 5;
}

#[Test]
func callStatic() bool {
    return Foo.pass![i32](9) == 9;
}



#[Test]
func funcPtrGlobal() bool {
    var f = => pass![f32];
    return f(5f) == 5f;
}

#[Test]
func funcPtrStatic() bool {
    var f = => Foo.pass![f32];
    return f(9f) == 9f;
}



func call[T](f fn (a T) T, a T) T {
    return f(a);
}
 
#[Test]
func passFuncPtr() bool {
    var f = => pass![i32];
    return call![i32](f, 5) == 5;
}



struct Wrapper[T] {
    data T,
}

impl Wrapper {
    static func with[T](data T) Wrapper![T] {
        return Wrapper![T] {
            data: data
        };
    }

    func get() T {
        return this.data;
    }
}

#[Test]
func staticReturn() bool {
    var w = Wrapper.with![i32](5);
    return w.data == 5;
}

#[Test]
func method() bool {
    var w = Wrapper![f32] { data: 9f };
    return w.get() == 9f;
}



struct Vec2[T] {
    x T,
    y T,
}

impl Vec2 {
    func pass[J](value J) J {
        var _ T;
        return value;
    }
}

#[Test]
func nestedGenericStructs() bool {
    var w = Wrapper![Vec2![i32]] {
        data: Vec2![i32] { y: 3 }
    };

    return w.data.y == 3;
}

#[Test]
func genericMethodInGenericStruct() bool {
    var v = Vec2![i32] {};
    return v.pass![u8](6 as u8) == (6 as u8);
}
