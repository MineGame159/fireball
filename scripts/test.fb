struct Point {
    i32 x;
    i32 y;

    Point(i32 x, i32 y) {
        this.x = x;
        this.y = y;
    }

    Point() {
        this.x = 0;
        this.y = 0;
    }

    ~Point() {
        c{ printf("Point destructor called\n"); }
    }

    void add(i32 x, i32 y) {
        this.x = this.x + x;
        this.y = this.y + y;
    }

    void print() {
        print2(this.x, this.y);
    }
}

i32 main() {
    // Basic
    var b = getNumber();
    b = 6 / 2;

    if (b > 1) print(b);

    // Structs
    var p = Point(0, 10); // Stack allocation
    for (i32 i = 0; i < 3; i++) p.add(i, 0);
    p.print();

    var p2 = new Point(); // Normal (malloc) allocation
    p2.print();
    delete p2;

    return 0;
}

i32 getNumber() {
    return 8;
}

/*
 * C functions
 */

void print2(i32 x, i32 y) {
    c{ printf("[%d, %d]\n", x, y); }
}

void print(i32 number) {
    c{ printf("%d\n", number); }
}